/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // example 1: basic tree created with root, left, and right
        Squirrel cheeks = new Squirrel("Cheeks");
        Squirrel squeaks = new Squirrel("Squeaks");
        Squirrel fluffybutt = new Squirrel("Mr. Fluffy Butt");

        Node<Squirrel> root = new Node<>(cheeks); // root of tree
        Node<Squirrel> leftChild = new Node<>(squeaks);
        Node<Squirrel> rightChild = new Node<>(fluffybutt);

        root.set_left(leftChild);     // attaches left node
        root.set_right(rightChild);   // attaches right node

        // printing out names to check things are linked properly
        System.out.println("Root: " + root.getData().getName());
        System.out.println();
        System.out.println("Left: " + root.left().getData().getName());
        System.out.println();
        System.out.println("Right: " + root.right().getData().getName());
        System.out.println();

        // example 2: adding more nodes to test deeper levels
        Squirrel nutty = new Squirrel("Nutty");
        Squirrel puffy = new Squirrel("Puffy");

        Node<Squirrel> leftLeft = new Node<>(nutty);
        Node<Squirrel> rightRight = new Node<>(puffy);

        leftChild.set_left(leftLeft);      // setting left left
        rightChild.set_right(rightRight);  // setting right right

        System.out.println("Left->Left: " + root.left().left().getData().getName());
        System.out.println();
        System.out.println("Right->Right: " + root.right().right().getData().getName());
        System.out.println();

        // edge case 1: node that stores null instead of Squirrel
        Node<Squirrel> nullNode = new Node<>(null);
        if (nullNode.getData() == null) {
            System.out.println("nullNode has no squirrel.");
        } else {
            System.out.println("nullNode: " + nullNode.getData().getName());
        }
        System.out.println();

        // edge case 2: leaf node that has no children
        Node<Squirrel> solo = new Node<>(new Squirrel("Solo"));
        System.out.println("Solo node: " + solo.getData().getName());
        System.out.println();
        System.out.println("Solo.left: " + solo.left());   // should be null
        System.out.println();
        System.out.println("Solo.right: " + solo.right()); // should be null
        System.out.println();

        // edge case 3: overwriting existing child node
        Squirrel replace = new Squirrel("Replaced");
        Node<Squirrel> replaceNode = new Node<>(replace);
        root.set_left(replaceNode); // replaces 'Squeaks' with 'Replaced'
        System.out.println("New Left: " + root.left().getData().getName());
        System.out.println();

        // edge case 4: randomly setting maybeNull to null or valid node
        Node<Squirrel> maybeNull = Math.random() > 0.5 ? new Node<>(new Squirrel("Random")) : null;
        if (maybeNull == null) {
            // making sure to not call left() or right() on a null node
            System.out.println("can't call left() or right() on a null node");
        } else {
            System.out.println(maybeNull.left()); // should be null
        }
        System.out.println();

        // checks if root is still there and hasn't changed
        System.out.println("Root still: " + root.getData().getName());
        System.out.println();
    }
}
